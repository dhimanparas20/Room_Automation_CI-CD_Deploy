# Networks for communication between services
networks:
  caddy:
    driver: bridge

# Volumes for data, config, and logs
volumes:
  config:
  data:
  log:
  caddy_data:
  caddy_config:
    driver: local

services:
  # Caddy server for reverse proxying and HTTPS
  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    environment:
      - WEB_DOMAIN=${WEB_DOMAIN}
    ports:
      - "80:80"       # HTTP (will be redirected to HTTPS)
      - "443:443"     # HTTPS
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy_data:/data
      - ./caddy_config:/config
      - ./public:/srv  # Mount the public directory here
    networks:
      - caddy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "80"]
      interval: 2m
      timeout: 3s
      retries: 3
      start_period: 3s  

  # Lazydocker Web Service
  lazydocker-web:
    build: ./lazydocker-web
    container_name: lazydocker-web
    restart: unless-stopped
    volumes:
      - ./lazydocker-web:/app  # <-- Bind mount for live code reload
      - /var/run/docker.sock:/var/run/docker.sock
      - ./lazydocker-web/config.yml:/root/.config/lazydocker/config.yml
    networks:
      - caddy
    depends_on:
      caddy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7681/"]
      interval: 2m
      timeout: 3s
      retries: 3
      start_period: 3s

  # EMQX MQTT Broker
  emqx:
    image: emqx/emqx:latest
    container_name: mqtt5
    restart: unless-stopped
    env_file:
      - emqx.env
    ports:
      - "1883:1883"    # MQTT / TCP
      - "1884:1884"    # WebSocket
    volumes:
      - ./data:/opt/emqx/data
      - ./log:/opt/emqx/log
    networks:
      - caddy
    depends_on:
      caddy:
        condition: service_healthy
      lazydocker-web:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/emqx/bin/emqx", "ctl", "status" ]
      interval: 2m
      timeout: 3s
      retries: 3
      start_period: 15s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /run

  # Telegram Bot Service (no HTTP port, process-based healthcheck)
  tg-bot:
    container_name: tg_bot_service
    build:
      context: ./room_automation_telegram_bot_main
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./room_automation_telegram_bot_main:/app  # <-- Bind mount for live code reload
    networks:
      - caddy
    depends_on:
      caddy:
        condition: service_healthy
      emqx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-f", "app.py"]
      interval: 2m
      timeout: 3s
      retries: 3
      start_period: 3s

  # Room Automation Scheduler Service
  scheduler:
    container_name: room_automation_scheduler
    build:
      context: ./Room_Automation_Scheduler
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./Room_Automation_Scheduler:/app  # <-- Bind mount for live code reload
    networks:
      - caddy
    depends_on:
      caddy:
        condition: service_healthy
      emqx:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 2m
      timeout: 3s
      retries: 3
      start_period: 3s
