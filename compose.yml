# Networks for communication between services
networks:
  caddy:
    driver: bridge

# Volumes for data, config, and logs
volumes:
  config:
  data:
  log:
  caddy_data:
  caddy_config:
    driver: local

services:
  # MQTT5 Eclipse Mosquitto service with MQTT (1883) and WebSocket (1884)
#  mqtt5:
#    image: eclipse-mosquitto
#    container_name: mqtt5
#    ports:
#      - "1883:1883"  # Default MQTT port
#      - "1884:1884"  # WebSocket port for MQTT (WS)
#    volumes:
#      - ./config:/mosquitto/config:rw
#      - ./data:/mosquitto/data:rw
#      - ./log:/mosquitto/log:rw
#    restart: unless-stopped
#    networks:
#      - caddy
  #Replace eclipse mosquitto with emqx
  emqx:
    image: emqx/emqx:latest
    container_name: mqtt5
    restart: unless-stopped
    env_file:
      - .env
    #    user: "${UID:-1000}:${GID:-1000}"   # Run as your host user for file permissions [[1]]
    ports:
      - "1883:1883"    # MQTT
      - "8883:8883"    # MQTT over SSL
      - "1884:8083"    # WebSocket
      - "8084:8084"    # Secure WebSocket
      - "18083:18083"  # Dashboard
    volumes:
      - ./data:/opt/emqx/data
      - ./log:/opt/emqx/log
      # - ./certs:/opt/emqx/etc/certs  # Uncomment if using custom SSL certs
    networks:
      - caddy
    healthcheck:
      test: [ "CMD", "/opt/emqx/bin/emqx", "ctl", "status" ]
      interval: 10s
      timeout: 20s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run


  # Caddy server for reverse proxying and HTTPS
  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    environment:
      - WEB_DOMAIN=${WEB_DOMAIN}
    ports:
      - "80:80"       # HTTP (will be redirected to HTTPS)
      - "443:443"     # HTTPS
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy_data:/data
      - ./caddy_config:/config
      - ./public:/srv  # Mount the public directory here
    networks:
      - caddy
    depends_on:
      mqtt5:
        condition: service_started

  # Room Automation Scheduler Service
  scheduler:
    container_name: room_automation_scheduler
    build:
      context: ./Room_Automation_Scheduler
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - caddy
    depends_on:
      mqtt5:
        condition: service_started
      caddy:
        condition: service_started

  # Telegram Bot Service
  tg-bot:
    container_name: tg_bot_service
    build:
      context: ./room_automation_telegram_bot_main
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file: 
      - .env
    networks:
      - caddy
    depends_on:
      mqtt5:
        condition: service_started
      caddy:
        condition: service_started
