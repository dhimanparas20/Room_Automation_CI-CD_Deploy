on:
  # Trigger workflow manually using the "Run workflow" button in GitHub Actions.
  workflow_dispatch:

jobs:
  run_pull:
    name: Run Pull and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install SSH Keys
      - name: Install SSH Keys
        run: |
          # Create a new private key file with the appropriate permissions.
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          # Write the private key from GitHub Secrets into the file.
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          # Add the SSH host to the known hosts file to avoid interactive prompt.
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      # Step 2: Connect to the remote server and pull the latest changes from the repository
      - name: Connect and Pull Changes
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            cd ${{ secrets.WORK_DIR }} && \
            echo "Pulling from: ${{ secrets.WORK_DIR }}" && \
            git checkout ${{ secrets.MAIN_BRANCH }} && \
            git pull && \
            
            cd "${{ secrets.TG_BOT_FOLDER }}"
            echo "Pulling from: ${{ secrets.TG_BOT_FOLDER }}" && \
            git checkout ${{ secrets.MAIN_BRANCH }} && \
            git pull && cd .. && \

            cd "${{ secrets.SCHEDULER_FOLDER }}"
            echo "Pulling from: ${{ secrets.SCHEDULER_FOLDER }}" && \
            git checkout ${{ secrets.MAIN_BRANCH }} && \
            git pull
            exit"

      # Step 3: Build and Run Docker Compose
      - name: Build and Run Docker Compose
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "\
            cd ${{ secrets.WORK_DIR }} && \
            sudo docker compose up --build -d && \
            sudo docker compose up -d && \
            sudo docker system prune --all --volumes --force"

      # Step 4: Clean Up SSH Configuration
      - name: Cleanup SSH Configuration
        run: rm -rf ~/.ssh